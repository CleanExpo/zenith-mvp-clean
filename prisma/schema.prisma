// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String    @id @default(cuid())
  name               String?
  email              String    @unique
  emailVerified      DateTime?
  image              String?
  password           String?
  stripeCustomerId   String?   @unique
  subscriptionId     String?
  subscriptionStatus String?   @default("free")
  subscriptionTier   String?   @default("free")
  accounts           Account[]
  sessions           Session[]
  auditLogs          AuditLog[]
  subscriptions      Subscription[]
  analyticsEvents    AnalyticsEvent[]
  userSessions       UserSession[]
  pageViews          PageView[]
  featureUsage       FeatureUsage[]
  userJourneys       UserJourney[]
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  details   Json?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
}

// Stripe-related models
model StripeCustomer {
  id               String   @id @default(cuid())
  stripeCustomerId String   @unique
  email            String?
  name             String?
  metadata         Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Subscription {
  id                   String               @id @default(cuid())
  stripeSubscriptionId String               @unique
  userId               String?
  customerId           String
  status               SubscriptionStatus
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  planId               String
  planName             String
  amount               Int
  currency             String
  interval             SubscriptionInterval
  intervalCount        Int
  trialStart           DateTime?
  trialEnd             DateTime?
  cancelAtPeriodEnd    Boolean              @default(false)
  cancelledAt          DateTime?
  endedAt              DateTime?
  metadata             Json?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  user                 User?                @relation(fields: [userId], references: [id])
  usage                SubscriptionUsage[]
}

model SubscriptionUsage {
  id                   String       @id @default(cuid())
  subscriptionId       String
  subscriptionItemId   String
  quantity             Int
  periodStart          DateTime
  periodEnd            DateTime
  metadata             Json?
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  subscription         Subscription @relation(fields: [subscriptionId], references: [stripeSubscriptionId])

  @@unique([subscriptionId, periodStart])
}

model Payment {
  id                String        @id @default(cuid())
  stripePaymentId   String        @unique
  customerId        String
  amount            Int
  currency          String
  status            PaymentStatus
  sessionId         String?
  invoiceId         String?
  paidAt            DateTime?
  metadata          Json?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model WebhookEvent {
  id        String            @id @default(cuid())
  eventId   String            @unique
  eventType String
  payload   Json
  status    WebhookEventStatus @default(processing)
  error     String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

// Enums
enum SubscriptionStatus {
  incomplete
  incomplete_expired
  trialing
  active
  past_due
  canceled
  unpaid
  paused
}

enum SubscriptionInterval {
  day
  week
  month
  year
}

enum PaymentStatus {
  requires_payment_method
  requires_confirmation
  requires_action
  processing
  requires_capture
  canceled
  succeeded
  failed
}

enum WebhookEventStatus {
  processing
  processed
  failed
}

// Analytics and User Behavior Tracking Models
model AnalyticsEvent {
  id          String             @id @default(cuid())
  sessionId   String?
  userId      String?
  eventType   AnalyticsEventType
  eventName   String
  properties  Json?
  page        String?
  referrer    String?
  userAgent   String?
  ipAddress   String?
  timestamp   DateTime           @default(now())
  createdAt   DateTime           @default(now())
  
  user        User?              @relation(fields: [userId], references: [id])
  session     UserSession?       @relation(fields: [sessionId], references: [id])
  
  @@index([userId, timestamp])
  @@index([sessionId, timestamp])
  @@index([eventType, timestamp])
  @@index([eventName, timestamp])
}

model UserSession {
  id                String          @id @default(cuid())
  sessionId         String          @unique
  userId            String?
  deviceType        String?
  browser           String?
  os                String?
  country           String?
  region            String?
  city              String?
  startTime         DateTime        @default(now())
  endTime           DateTime?
  duration          Int?            // in seconds
  pageViews         Int             @default(0)
  events            Int             @default(0)
  isActive          Boolean         @default(true)
  lastActivityAt    DateTime        @default(now())
  entryPage         String?
  exitPage          String?
  referrer          String?
  utmSource         String?
  utmMedium         String?
  utmCampaign       String?
  utmTerm           String?
  utmContent        String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  user              User?           @relation(fields: [userId], references: [id])
  analyticsEvents   AnalyticsEvent[]
  sessionPageViews  PageView[]
  
  @@index([userId, startTime])
  @@index([sessionId])
  @@index([startTime])
}

model PageView {
  id            String      @id @default(cuid())
  sessionId     String?
  userId        String?
  page          String
  title         String?
  referrer      String?
  duration      Int?        // time spent on page in seconds
  timestamp     DateTime    @default(now())
  createdAt     DateTime    @default(now())
  
  user          User?       @relation(fields: [userId], references: [id])
  session       UserSession? @relation(fields: [sessionId], references: [id])
  
  @@index([userId, timestamp])
  @@index([sessionId, timestamp])
  @@index([page, timestamp])
}

model FeatureUsage {
  id            String      @id @default(cuid())
  userId        String?
  sessionId     String?
  featureName   String
  action        String
  metadata      Json?
  timestamp     DateTime    @default(now())
  createdAt     DateTime    @default(now())
  
  user          User?       @relation(fields: [userId], references: [id])
  
  @@index([userId, featureName])
  @@index([featureName, timestamp])
  @@index([timestamp])
}

model UserJourney {
  id            String      @id @default(cuid())
  userId        String
  sessionId     String?
  journeyStage  String      // 'awareness', 'consideration', 'trial', 'purchase', 'retention'
  touchpoint    String      // specific page or feature
  action        String      // what they did
  metadata      Json?
  timestamp     DateTime    @default(now())
  createdAt     DateTime    @default(now())
  
  user          User        @relation(fields: [userId], references: [id])
  
  @@index([userId, timestamp])
  @@index([journeyStage, timestamp])
}

// Analytics Event Types
enum AnalyticsEventType {
  page_view
  click
  form_submit
  form_start
  form_abandon
  feature_usage
  api_call
  error
  conversion
  engagement
  custom
}